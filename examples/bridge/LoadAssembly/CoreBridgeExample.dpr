program CoreBridgeExample;

{$APPTYPE CONSOLE}
{$R *.res}

uses
{$IF CompilerVersion > 22}
	System.SysUtils,
{$ELSE}
	SysUtils,
{$IFEND}
  CNCoreClrLib.BridgeMgr, CrystalNet.Runtime.Intf,CNCoreClrLib.AssemblyMgr,
  CrystalNet.Console, CNCoreClrLib.RttiMgr;


(* .Net Core Mathematics.Dll source code

        namespace Mathematics
        {
            public class Mathematics
            {
                public int Add(int a, int b)
                {
                    return a + b;
                }

                public int Subtract(int a, int b)
                {
                    return a - b;
                }

                public bool Equal(int a, int b)
                {
                    return a == b;
                }

                public static int Multiply(int a, int b)
                {
                    return a * b;
                }
            }
        }
*)

type
  //Import Mathematics.dll with dotNetCore4Delphi Import utility
  //This is the interface and class generated by the import utility

	IMathematicsClass = interface(ICoreClrClass)
	['{22DBBA95-18C3-4AC7-8326-328E37544F33}']
	{ public }
		{ class } function Multiply(a: Integer; b: Integer): Integer;
	end;

	[CoreTypeSignature('Mathematics.Mathematics')]
	IMathematics = interface(IObject)
	['{32A9F9E0-5A9E-41FE-916C-09599EDAD4BD}']
	{ public }
		function Add(a: Integer; b: Integer): Integer;
		function Equal(a: Integer; b: Integer): Boolean;
		function Subtract(a: Integer; b: Integer): Integer;
	end;

	TMathematics = class(TCoreClrGenericImport<IMathematicsClass, IMathematics>)
	public
		class function Create: IMathematics;
	end;

{ TMathematics }

class function TMathematics.Create: IMathematics;
begin
	Result := inherited Create([]);
end;


var
  Mathematics : IMathematics;


  procedure LoadMathematicAssembly;
  begin
    // If error occurs while executing LoadFrom then
    // Right-Click on the file and select properties, click on the
    // unblock button to allow access.
    TCoreClrAssembly.LoadFrom('Mathematics.dll');
  end;

  procedure CreateMathematicInstance;
  begin
    Mathematics := TMathematics.Create;
  end;

  procedure AccessMathematicsObjectMethods;
  begin
    TConsole.NClass.WriteLine('Add(30, 50):      {0}', Mathematics.Add(30, 50));
    TConsole.NClass.WriteLine('Subtract(30, 50): {0}', Mathematics.Subtract(30, 50));
    TConsole.NClass.WriteLine('Equal(30, 50):    {0}', Mathematics.Equal(30, 50));
    TConsole.NClass.WriteLine('Equal(50, 50):    {0}', Mathematics.Equal(50, 50));
    TConsole.NClass.WriteLine('Multiply(50, 50): {0}', TMathematics.NClass.Multiply(50, 50)); //Static call
  end;

begin
  TConsole.NClass.WriteLine('Hello! Welcome to .Net Core for Delphi.');
  TConsole.NClass.WriteLine('======================================');
  TConsole.NClass.WriteLine('This program demonstrate how to use the Core Bridge to communicate with .Net library type members');
  TConsole.NClass.WriteLine;
  try
    LoadMathematicAssembly;
    CreateMathematicInstance;
    AccessMathematicsObjectMethods;
  except
    on E: Exception do
      TConsole.NClass.WriteLine('Exception: {0}', e.Message);
  end;
  TConsole.NClass.ReadKey;
end.


